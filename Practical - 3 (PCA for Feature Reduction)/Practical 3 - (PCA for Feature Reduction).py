# -*- coding: utf-8 -*-
"""PCA_on_IRIS(1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XwsTjD9KBcDRER2E67oRM3nPubCBvnYb
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
# %matplotlib inline
plt.style.use('seaborn')

#iris = pd.read_csv("iris.csv")
from sklearn.datasets import load_iris
iris = load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = pd.Series(iris.target, name='FlowerType')
X.head()

plt.figure(4, figsize=(8, 6))
plt.clf()

# Plot the training points
plt.scatter(X['sepal length (cm)'], X['sepal width (cm)'], s=35, c=y, cmap=plt.cm.brg)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.title('Sepal length vs. Sepal width')
plt.show()

#iris
dataset=pd.read_csv("iris.csv")
dataset

"""**Standardize the Data**"""

features = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
#features = ['sepal length (cm)', 	'sepal width (cm)', 	'petal length (cm)', 	'petal width (cm)']
x = dataset.loc[:, features].values

y = dataset.loc[:,['species']].values

x = StandardScaler().fit_transform(x)

pd.DataFrame(data = x, columns = features).head()

#PCA Projection to 2D
pca = PCA(n_components=2)
principalComponents = pca.fit_transform(x)
principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2'])
principalDf.head(5)

dataset[['species']].head()

finalDf = pd.concat([principalDf, dataset[['species']]], axis = 1)
finalDf.head(5)

"""**Visualize 2D Projection**"""

fig = plt.figure(figsize = (8,8))
ax = fig.add_subplot(1,1,1)
ax.set_xlabel('Principal Component 1', fontsize = 15)
ax.set_ylabel('Principal Component 2', fontsize = 15)
ax.set_title('2 Component PCA', fontsize = 20)


targets = ['setosa', 'versicolor', 'virginica']
colors = ['r', 'g', 'b']
for variety, color in zip(targets,colors):
    indicesToKeep = finalDf['species'] == variety
    ax.scatter(finalDf.loc[indicesToKeep, 'principal component 1']
               , finalDf.loc[indicesToKeep, 'principal component 2']
               , c = color
               , s = 50)
ax.legend(targets)
ax.grid()

#Explained Variance:The explained variance tells us how much information (variance)
#can be attributed to each of the principal components.
pca.explained_variance_ratio_

